package com.pchen.controller;

import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URLEncoder;
import java.sql.Timestamp;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONObject;
import com.pchen.entity.User;
import com.pchen.service.PicService;
import com.pchen.service.UserService;
import com.pchen.util.Base64Util;
import com.pchen.util.ControllerUtil;
import com.pchen.util.FileUtil;
import com.pchen.util.HttpUtil;
import com.pchen.util.MD5;
import com.pchen.util.Params;

import sun.misc.BASE64Decoder;

/**
 * @author privatechen 创建时间：2018年1月25日 下午2:19:22 类说明
 */
@Controller
@RequestMapping(value = "/user")
public class LoginController extends BaseController {

	@Resource(name = "userService")
	private UserService userService;
	
	@Resource(name="picService")
    private PicService picService;
	
	@RequestMapping(value = "/doLogin")
	public void doLogin(HttpServletRequest req, HttpServletResponse response) {

		String username = req.getParameter("username");
		String password = req.getParameter("password");
		String confirmLogin = req.getParameter("confirmLogin");

		password = MD5.md5(password);

		JSONObject returnObject = JSONObject.parseObject("{}");

		Params params = new Params();
		params.put("username", username);
		params.put("password", password);

		User user = new User();
		user = userService.getUser(params);
		if (user == null) {
			returnObject.put("user", "notExist");
		} else {

			 
			returnObject.put("user", user);
			// 登录成功，把信息存放到这里
			req.getSession().setAttribute("userInfo", username);
		}
		ControllerUtil.printToPage(response, returnObject);
	}

	/// 注销
	@RequestMapping(value = "/logout")
	public void logout(HttpServletRequest req, HttpServletResponse response) {
		JSONObject returnObject = JSONObject.parseObject("{}");
		returnObject.put("logout", "yes");
		if (req.getSession().getAttribute("userInfo") != null) {
			req.getSession().removeAttribute("userInfo");
		}

		ControllerUtil.printToPage(response, returnObject);
	}

	 
	// 跳转到注册界面
	@RequestMapping(value = "/register")
	public ModelAndView register() {
		ModelAndView mv = this.getModelAndView();
		mv.setViewName("/user/register");
		return mv;
	}
	
	 
 // 跳转到人脸注册界面
    @RequestMapping(value = "/faceRegister")
    public ModelAndView faceRegister() {
        ModelAndView mv = this.getModelAndView();
        mv.setViewName("/user/faceRegister");
        return mv;
    }
    private void generateImage(String base64Str, String filePath) {

        @SuppressWarnings("restriction")
        BASE64Decoder decoder = new BASE64Decoder();
        // 生成jpeg图片
        FileOutputStream out = null;
        try {
            // Base64解码
            @SuppressWarnings("restriction")
            byte[] b = decoder.decodeBuffer(base64Str);
            for (int i = 0; i < b.length; ++i) {
                if (b[i] < 0) {// 调整异常数据
                    b[i] += 256;
                }
            }

            out = new FileOutputStream(filePath);
            out.write(b);
            out.flush();
        } catch (Exception e) {

        } finally {
            if (null != out) {
                try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    // 人脸注册
    @RequestMapping(value = "/doFaceRegister")
    public void doFaceRegister(HttpServletRequest req, HttpServletResponse response) {
        JSONObject returnObject = JSONObject.parseObject("{}");
        String username = req.getParameter("username");
        String password = req.getParameter("password");
        String photoData = req.getParameter("photoData");
        if (photoData.length() > 0) {
            photoData = photoData.split(",")[1];
        }
        
        System.out.println("doFaceRegister.........");
        System.out.println(username + ":" + password + ":" + photoData);
        
            
        String facesPath = req.getSession().getServletContext().getRealPath("") + "/faces/";
            
        
       
        boolean isExist = userService.isExist(username);
        
        if (isExist) {
            returnObject.put("registerSuccess", "no");
            ControllerUtil.printToPage(response, returnObject);
            return;
        }
        
        generateImage(photoData, facesPath + username + ".png");
        String addResult = addFace(username, facesPath + username + ".png");
        JSONObject addFaceResult = JSONObject.parseObject(addResult);
        System.out.println("addFaceResult:" + addFaceResult);
        // 如果结果不包含log_id，那么说明添加脸失败
        if(addFaceResult.containsKey("error_code")) {
            returnObject.put("registerSuccess", "no");
            return;
        }
        
        User newUser = new User();
        if (username.length() > 0 && password.length() > 0) {
            newUser.setUsername(username);
            newUser.setPassword(MD5.md5(password));
            Timestamp createtime = new Timestamp(System.currentTimeMillis());// 获取系统当前时间
            newUser.setCreatetime(createtime);
        }

        int isAddSuccess = userService.addUser(newUser);
        /// 如果加入成功了，那么受影响的行为1，即isAddSuccess = 1

        /// 已经注册成功了，那么将用户信息存放到session里
        if (isAddSuccess != 0) {
            req.getSession().setAttribute("userInfo", username);
            returnObject.put("registerSuccess", "yes");
        }

        
        
        
        ControllerUtil.printToPage(response, returnObject);
    }
    
    
    public static String addFace(String username, String filepath) {
        // 请求url
        String url = "https://aip.baidubce.com/rest/2.0/face/v2/faceset/user/add";
        try {
            // 本地文件路径
            byte[] imgData = FileUtil.readFileByBytes(filepath);
            
            String imgStr = Base64Util.encode(imgData);
            String imgParam = URLEncoder.encode(imgStr, "UTF-8");
            
            // 注意这里的图片格式！
            System.out.println("imgParam:" + imgParam);
            int id = (int) (Math.random() * 100000000);
            String uId = "_" + id;
            // uId有要求，文档上有写，不能是纯数字
            // group_id可以写成你自己的组名字，我这里定义的是myuser
            // images格式要注意
            String param = "uid=" + uId + "&user_info=" + username + "&group_id=myuser&images="
                + imgParam;
            // 注意这里仅为了简化编码每一次请求都去获取access_token，线上环境access_token有过期时间， 客户端可自行缓存，过期后重新获取。
            String accessToken = "24.750b94124c9bb50d0b16ba8d1377ea20.2592000.1536929059.282335-10698857";

            String result = HttpUtil.post(url, accessToken, param);
            System.out.println(result);
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    
    
	@RequestMapping(value = "/customer")
	public ModelAndView customer(HttpServletRequest req, HttpServletResponse response) {
	    String username = req.getParameter("username");
		ModelAndView mv = this.getModelAndView();
		mv.addObject("username", username);
		mv.setViewName("/user/customer");
		return mv;
	}

	@RequestMapping(value = "/isLogin")
	public void isLogin(HttpServletRequest req, HttpServletResponse response) {
		JSONObject returnObject = JSONObject.parseObject("{}");
		// 将session中的值去掉\
		String userInfo = (String) req.getSession().getAttribute("userInfo");
		if (userInfo != null && userInfo.length() > 0) {
			returnObject.put("userInfo", userInfo);
		} else {
			returnObject.put("userInfo", "");
		}
		ControllerUtil.printToPage(response, returnObject);
	}

	@RequestMapping(value = "/doRegister")
	public void doRegister(HttpServletRequest req, HttpServletResponse response) {
		// 如果能进到注册里来，说明没有该用户，但是为了保险还是要检测一下。。
		JSONObject returnObject = JSONObject.parseObject("{}");

		User newUser = new User();

		String username = req.getParameter("username");
		String password = req.getParameter("password");
		String age = req.getParameter("age");
		String info = req.getParameter("info");
		String sex = req.getParameter("sex");
		Timestamp createtime = new Timestamp(System.currentTimeMillis());// 获取系统当前时间

		boolean isExist = false;
		isExist = userService.isExist(username);
		if (isExist) {
			returnObject.put("registerSuccess", "no");
			ControllerUtil.printToPage(response, returnObject);
			return;
		}

		if (username.length() > 0 && password.length() > 0) {
			newUser.setUsername(username);
			newUser.setPassword(MD5.md5(password));
			if (age != null && age.length() > 0 ) {
				newUser.setAge(Integer.parseInt(age.trim()));
			} else {
				newUser.setAge(0);
			}
			if (info != null && info.length() > 0) {
				newUser.setInfo(info);
			} else {
				newUser.setInfo("没有相关信息");
			}

			if (sex != null && sex.length() > 0) {
				newUser.setSex(sex);
			} else {
				newUser.setSex("O");
			}

			newUser.setCreatetime(createtime);
		}

		int isAddSuccess = userService.addUser(newUser);
		/// 如果加入成功了，那么受影响的行为1，即isAddSuccess = 1

		/// 已经注册成功了，那么将用户信息存放到session里
		if (isAddSuccess != 0) {
			req.getSession().setAttribute("userInfo", username);
			returnObject.put("registerSuccess", "yes");
		}

		ControllerUtil.printToPage(response, returnObject);
		System.out.println(isAddSuccess);

	}

	 
	
	@RequestMapping(value = "/loginByFace")
	public void loginByFace(HttpServletRequest req, HttpServletResponse response) {
		String faceImage = req.getParameter("faceImage");
		float checkScores = 0L;
		String checkUser = "";
		faceImage = faceImage.split(",")[1];
		
		byte[] factByte = Base64.decodeBase64(faceImage);
		JSONObject returnObject = JSONObject.parseObject("{}");
		returnObject = userService.loginByFace(factByte);
		System.out.println(returnObject);
		System.out.println("login by face...");
		System.out.println("faceImage" + faceImage);
		///包含错误信息，直接是用户不存在
		if (null == returnObject.getJSONArray("result")) {
		    returnObject.put("user", "notExist");
		    ControllerUtil.printToPage(response, returnObject);
		    return ;
		}
		JSONObject resultObject = (JSONObject) returnObject.getJSONArray("result").get(0);
		
		if(resultObject.getString("scores") != null) {
			checkScores = Float.parseFloat(resultObject.getJSONArray("scores").getString(0).trim());
			checkUser = resultObject.getString("user_info").trim();
		}
		System.out.println(checkUser + ":" + checkScores);
		
		//进行判断，如果分数小于85，则认为不存在这个用户
		 
		
		if (checkScores < 85) {
			returnObject.put("user", "notExist");
		} else {

			 
			 
			
			returnObject.put("user", checkUser);
			// 登录成功，把信息存放到这里
			req.getSession().setAttribute("userInfo", checkUser);
		}
		ControllerUtil.printToPage(response, returnObject);
		//进行判断
		
		
	 
	}
}
